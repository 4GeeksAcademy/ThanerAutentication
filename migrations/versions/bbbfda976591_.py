"""empty message

Revision ID: bbbfda976591
Revises: 0763d677d453
Create Date: 2025-03-23 13:29:02.827537

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bbbfda976591'
down_revision = '0763d677d453'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Paso 1: Añadir la columna 'username' como NULLABLE.
    # Esto permite que la migración se complete sin violar la restricción NOT NULL
    # para las filas existentes que no tienen un valor para 'username'.
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('username', sa.String(length=50), nullable=True))

    # Paso 2: Rellenar los valores NULL en la columna 'username' para las filas existentes.
    # Es CRÍTICO que elijas un valor por defecto adecuado o una lógica para generar nombres de usuario.
    # Aquí se usa 'default_user' como ejemplo. Si tienes un 'id' u otra columna
    # que pueda usarse para generar un nombre único, es mejor usarla.
    # Por ejemplo: op.execute("UPDATE \"user\" SET username = 'user_' || id::text WHERE username IS NULL")
    # Asegúrate de que el nombre de la tabla "user" esté entre comillas dobles si se creó así en PostgreSQL.
    op.execute("UPDATE \"user\" SET username = 'default_user' WHERE username IS NULL")


    # Paso 3: Cambiar la columna 'username' a NOT NULL y añadir la restricción UNIQUE.
    # Esto solo se hace DESPUÉS de que todos los valores NULL hayan sido rellenados.
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('username',
                              existing_type=sa.String(length=50),
                              nullable=False)
        # Asegúrate de que no haya duplicados después de rellenar los valores.
        # Si 'default_user' se usa para varias filas, la restricción UNIQUE fallará.
        # Por eso, el Paso 2 es tan importante.
        batch_op.create_unique_constraint("uq_user_username", ['username']) # Se recomienda dar un nombre a la restricción

    # Paso 4: Eliminar la columna 'is_active'.
    # Esto se hace al final para asegurar que 'username' esté configurado correctamente.
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('is_active')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
        # Asegúrate de usar el mismo nombre de restricción si lo cambiaste en upgrade
        batch_op.drop_constraint("uq_user_username", type_='unique') # Usar el nombre de la restricción
        batch_op.drop_column('username')

    # ### end Alembic commands ###
